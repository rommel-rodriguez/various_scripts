#!/bin/bash

FONT_PATH=
GOT_FONTS=false
####################### REPOSITORIES ######################
PLGH='https://github.com/powerline/powerline.git'
PLFONTSGH='https://github.com/powerline/fonts.git'
####################### PATH TO RAW FILES ######################
PLRAW='https://github.com/powerline/powerline/raw'
PLFONTSRAW='https://github.com/powerline/fonts/raw'

LOCALDIR="${HOME}/.local/bin"
VIMCONFIG="${HOME}/.vim/vimrc"
GVIMCONFIG="${HOME}/.gvimrc"
LOCALINSTALL=false
SHELLCONFIG="${HOME}/.bashrc"
# System Wide variable(sudo)
# SW=""


confirm(){
	msg=$1
	rsp=""
	printf "%s \n(Y/n): " "${msg}"
	read -r -e rsp # -r option to prevent \ to scape characters
	rsp=$(echo "$rsp" | tr "[:upper:]" "[:lower:]")
	if test "${rsp}" != "y"; then
		# echo "Aborting operation"
		return 1 
	fi
	return 0 
}


# Adds LOCALDIR to PATH environment variable, if it is not alreday present
add_localdir(){
	# TODO: Somehow ensure that this addition to the PATH, comes BEFORE
	# the powerline-specific code inside .bashrc or else bash will not 
	# know where to find the necessary binaries.
	if ! (echo "$PATH" | grep -q "$LOCALDIR"); then
		echo 'PATH=$PATH:'"$LOCALDIR"';export PATH;' >> "${SHELLCONFIG}"
	fi
}


install_fonts(){
	# TODO: Problem here, install.sh does not support system wide install
	scope="Local User"
	if ! $LOCALINSTALL;then
		scope="System Wide"
	fi

	dirname='powerline_fonts'
	git clone "${PLFONTSGH}" /tmp/$dirname
	pushd /tmp/$dirname
	./install.sh &&\
		echo "Success installing fonts in scope: ${scope}"
	popd
	rm -rf /tmp/$dirname
}


power_req(){
	if ! $LOCALINSTALL;then
		sudo apt-get update
		query=$(apt-cache search  ^powerline$)
		if test -n "$query";then
			sudo pip3 install powerline-status ||\
				sudo apt-get install -y powerline
		fi
		# TODO: Assess if this is actually still necessary after due
		# to the fact that installing form the repo might be more than
		# enough, gonna comment out this block, reenable if this does
		# not work after testing in clean environment.
		##  query=$(apt-cache search  ^fonts-powerline$)
		##  if test -n "$query";then
		##  	sudo apt-get install -y fonts-powerline
		##  fi
	else
		# Local Install
		# TODO: Ensure that pip3 is installed
		pip3 install powerline-status

	fi

	install_fonts


	# wget "${PLFONTSRAW}/master/Hack/Hack-Regular.ttf"

	# query=  # Clean query before new search 
	# query=$(apt-cache search  ^fonts-powerline$)
	# if test -n "$query" -a sudo apt-get install -y fonts-powerline;then
	# 	GOT_FONTS=true
	# else
	# 	## Package fonts-powerline is supposed to
	# 	## install the packages installed manually 
	# 	## before
	# 	wget "${PLRAW}/develop/font/PowerlineSymbols.otf"
	# 	wget "${PLRAW}/develop/font/10-powerline-symbols.conf"
	# fi
	# # In either case install locally the complete set of fonts from the repo
}


get_font_path(){
    echo "Getting the path to the fonts"
    line_number=$(xset q | grep -ni 'Font Path' | cut --bytes=1,2)
    # line_number=$(($line_number+1))
    # Shellcheck says we do not need $ in fron of variables for arithmetic 
    # operations
    line_number=$((line_number+1))
    FONT_PATH=$(xset q | head --lines=$line_number | tail --lines=1 |\
        cut --delimiter=, --fields=1 | cut -c 1,2 --complement)

    ## echo "get_font_path return code ${?}"
}


move_fonts_update(){
    # Move preferred font to FONT_PATH
    # TODO: Add support for local install
    echo "Moving Fonts ..."
    sudo mv Hack-Regular.ttf "$FONT_PATH"
    if ! $GOT_FONTS;then
        sudo mv PowerlineSymbols.otf "$FONT_PATH"
    fi
    fc-cache -vf "$FONT_PATH"
}


test_support(){
    # vim --version | grep -E '\+python' &> /dev/null
    # if [ $? -eq 0 ];then 
    if vim --version | grep -q -E '\+python3';then 
        echo "Vim has python3 support"
	return 0
    else
        echo -e "Vim does not have python support this has to be fixed"\
            "or powerline will not work on vim"
	return 1
    fi
}


get_rep_root(){
	# This function obtains the path to the repository-root
    echo "[INFO] Setting REP_ROOT"
	if "${LOCALINSTALL}"; then
        echo "[INFO] Performing local installation"
		REP_ROOT=$( pip3 show powerline-status | grep -i location \
			| cut --delimiter=' ' -f 2)
    else
        REP_ROOT=$( sudo pip3 show powerline-status | grep -i location \
            | cut --delimiter=' ' -f 2)
	fi

    if test -z "${REP_ROOT}"; then
        echo "[ERROR] Critical Error REP_ROOT is empty, terminating ..."
        return 1
    fi

    printf "[INFO] Setting REP_ROOT to %s" "${REP_ROOT}"

	return 0
}


update_bashrc(){
	read -r -d '' powerl_config<<- _EOF_
	####### Start of powerline related config
	powerline-daemon -q
	POWERLINE_BASH_CONTINUATION=1
	POWERLINE_BASH_SELECT=1
	. ${REP_ROOT}/powerline/bindings/bash/powerline.sh
	####### End of powerline related config
	_EOF_

	# grep -ie powerline-daemon "${SHELLCONFIG}"  &> /dev/null
	# if [ ! $? -eq 0 ];then
	if grep --quiet -ie "powerline-daemon" "${SHELLCONFIG}";then
		if $LOCALINSTALL;then
			add_localdir		
		fi
		echo "$powerl_config" >> "${SHELLCONFIG}" 
	else
		echo "Config line alredy there"
	fi
}


update_vimrc(){
	vpower_config=""
	read -r -d '' vpower_config<<- _EOF_
	" POWERLINE CONFIG
	set  rtp+=${REP_ROOT}/powerline/bindings/vim/
	set laststatus=2
	_EOF_

	# Next line's version works but quite ugly
	# vpower_config="\" POWERLINE FLAG\\nset rtp+=$REP_ROOT/powerline/bindings/vim/\\nset laststatus=2"
	# TODO: Add logic to proof that REP_ROOT was found
	if grep --quiet -ie "^set *rtp+=.*powerline.*$" "${VIMCONFIG}" ;then
	prevconf=$(grep -ie "^set *rtp+=.*powerline.*$" "${VIMCONFIG}")
	msg=""
	# TODO: Test whether the vars will expand or not
	read -r -d '' msg <<-_EOF_
	Previous configuraton:
	${prevconf}
	Do you wish replace it for:
	${vpower_config}
	_EOF_

	echo "${VIMCONFIG}"
	if confirm "${msg}";then
		# sed --in-place ':set laststatus=2::' "${VIMCONFIG}"
		# sed --in-place "s:^set *rtp+.*$:${vpower_config}:" "${VIMCONFIG}"
		# Delete previous configuration
		sed --in-place '/POWERLINE CONFIG$/d' "${VIMCONFIG}"
		sed --in-place '/set laststatus=2/d' "${VIMCONFIG}"
		sed --in-place '/^set *rtp+.*powerline.*$/d' "${VIMCONFIG}"
		echo "${vpower_config}" >> "$VIMCONFIG"
	fi
	else
		echo "There is no previous configuration, writing to .vimrc ..."
		echo "$vpower_config" >> "${VIMCONFIG}"
	fi
}

if confirm "Local Installation?"; then
	LOCALINSTALL=true
	echo "Execute install_local function"
fi
# if ! "${LOCALINSTALL}";then
# 	SW="sudo"
# fi
power_req &&\
move_fonts_update &&\
test_support &&\
get_rep_root &&\
update_bashrc &&\
update_vimrc


# power_req &&\
#     get_font_path &&\
#     test_support &&\
#     get_rep_root && update_bashrc && update_vimrc

# Original Version:
# power_req &&\
#     get_font_path && move_fonts_update &&\
#     test_support &&\
#     get_rep_root && update_bashrc && update_vimrc
